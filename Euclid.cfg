[probe]
pin:^PG10
x_offset: 6 # offset for microswitch x direction off nozzle
y_offset: 66 # offset for microswitch y direction off nozzle
#z_offset: 0 # offset for microswitch in z height
samples: 2
sample_retract_dist: 2 # this is so the machine has time for the switch to reset properly, especially with a higher retract speed
samples_result: average
samples_tolerance: 0.04
samples_tolerance_retries: 2
speed: 6 # do not go higher than 10mm/s, you will destroy the switch
lift_speed: 35
 
#########################################################
 
[homing_override]
gcode: SET_KINEMATIC_POSITION X=0 Y=0 Z=0 
 
 G0 Z8 F500           ; raise bed to 8
 G28 X Y             ; home X & Y
 M401                  ; deploy Euclid Probe
 G0 X244 Y185 F6000  ; move to X200 Y250
 G28 Z                 ; home Z
 M402                  ; retract Euclid Probe
axes: z
set_position_z:-15
 
 
###########################################################
[bed_mesh]
speed = 200
horizontal_move_z = 10
mesh_min = 20,20
mesh_max = 490,490
probe_count = 7,7
mesh_pps: 3,3
fade_start: 1
fade_end: 10
algorithm: bicubic
bicubic_tension: 0.4
#relative_reference_index: 24
###########################################################

[quad_gantry_level]
gantry_corners:	
		20,20
		20,400
    490,25
    490,380
points:
		70,25
		70,420
		450,25
		450,420
speed: 200
horizontal_move_z:10 ; MagProbe 20, Vinda or Omron 5
retries: 10
retry_tolerance: 0.0085
max_adjust: 1
 
#[z_tilt]
#z_positions:
  #0,20
  #20,400
  #490,385
  #490,7
	#0,250
	#493,6
	#493,385
#points:
    #25,30
	#25,380
	#470,380
	#470,10
	#70,215
	#450,7
	#450,380
#speed: 180
#horizontal_move_z: 10
#retries: 10
#retry_tolerance: 0.0075
 


###########################################################################
#movement for euclid dock and undock 

[gcode_macro preflight]
gcode:
  G90
  G1 X250 Y430 Z8     ; Step 1, Pre-flight location X30 Y480
###########################################################################

[gcode_macro preflight_2]
gcode:
  G90
  G1 X0 Y0 Z8
 
[gcode_macro move_to_dockside]
# Move to location adjacent to dock X30 Y0
gcode:
  G90              ; absolute coordinate system
  G0 X220 Y502 Z8           ; Step 2, Dock Adjacent move to X30 Y0
############################################################################

[gcode_macro move_to_dock]
gcode:
# Move over dock for probe pickup X-30 movement
  G90                  ; absolute coordinate system
  G0 X250 Y502 Z8            ; Step 3, move to dock over probe at X0 Y0
############################################################################

[gcode_macro move_outof_dock]
# Location adjacent to dock for exit Y+40 movement 
gcode:
  G90                 ; absolute coordinate system
  # the following line may need a G91 to preceed it depending on overides
  G0 X250 Y480 Z8          ; Step 4, mouve out of dock move to X0 Y40 Z15 
############################################################################

[gcode_macro second_move]
gcode:
  G90
  G0 X220 Y502 Z8     ; Step 1, Pre-flight location X100 Y20
#############################################################################

[gcode_macro GO_HOME]
gcode:    
    G91
    G1 Z15
    G90
    G1 X1 Y500 f4800


    # actually check if probe is deplyed and error out.  Needs to be called by routine which does QUERY_PROBE due to the way klipper does expansion of macros
[gcode_macro do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
      #{action_raise_error("probe already stowed - remove and return to dock")}
    {% endif %}

[gcode_macro error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    do_error_if_probe_deployed

[gcode_macro do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
      {action_raise_error("probe unsuccessfully deployed")}
    {% endif %}   


[gcode_macro error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    do_error_if_probe_not_deployed
    



######################################################################################################

# Macro to Deploy Bed Probe
[gcode_macro M401]
gcode:
    {action_respond_info("Entering M401")}
    error_if_probe_deployed
    G90
     #{% if printer.probe.last_query %} 
      G0 Z8 F10000        ;  set approach elevation of Z15 
      preflight ;  set carraige to safe position
      M400                 ;  wait for moves to finish
      G4 P250 
     move_to_dockside
      M400                 ;  wait for moves to finish
      G4 P250 
     move_to_dock         ;  translate over probe pickup location
      M400                 ;  wait for moves to finish
      G4 P250              ;  pause 1/4 sec for detection
      move_outof_dock      ;  translate out of dock

      G0 Z8 F10000        ;  raise to elevation of Z20

       
      error_if_probe_not_deployed
    {action_respond_info("Exit M401")}
################################################################################



######################################################################################


# Macro to Stow Bed Leveling Probe
[gcode_macro M402]
gcode:
    {action_respond_info("Entering M402")}
    error_if_probe_deployed
    G90
     #{% if not printer.probe.last_query %} #this might be reveersed in order
     G0 Z8 F10000               ;  set approach elevation of Z20
     preflight
     M400                 ;  wait for moves to finish
     G4 P250  
     move_to_dock                ;  move probe into to dock
     M400                 ;  wait for moves to finish
     G4 P250  
     #move_to_dockside            ;  swipe probe off 
     second_move                ;  move away from dock area 
     G0 Z8 F10000               ;  move up to elevation of Z20
     G0 X0 Y0        ;  move probe to center of bed in ready position
     error_if_probe_deployed
    {action_respond_info("Exit M402")}
    
    
     #{% endif %}
#################################################################################

####################################


###################################################################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG

variable_buffer: 10

gcode:
    {% set start_print  = printer["gcode_macro START_PRINT"] %}
    {% set bed_mesh     = printer.configfile.settings.bed_mesh %}
    {% set probe_config = printer.configfile.settings.probe %}

    {% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
        { action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
        { action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }

        {% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
        {% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
        {% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
        {% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}

        #DEPLOY_PROBE
        M401

        {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

            {% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}

            # bed_mesh.probe_count is a tuple
            {% set probe_count = bed_mesh.probe_count %}
            {% set probe_count_x = probe_count[0] %}
            {% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}

            # -1 is the effective, undocumented default
            {% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
            {% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
            {% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}

            # If print area X is smaller than 50% of the bed size, use the
            # minimum probe count for X instead of the default
            {% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
                {% set probe_count_x = minimum_probe_count %}
            {% endif %}

            # If print area Y is smaller than 50% of the bed size, use the
            # minimum probe count for Y instead of the default
            {% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
                {% set probe_count_y = minimum_probe_count %}
            {% endif %}

            {% if relative_reference_index > 0 %}
                {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
            {% endif %}

            {% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
            {% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
            {% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
            {% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}

            { action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
            { action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
            { action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
            { action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }

            BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}

        {% else %}
            BED_MESH_CALIBRATE_ORIG
        {% endif %}

        #STOW_PROBE
        M402

    {% else %}
        #DEPLOY_PROBE
        M401

        BED_MESH_CALIBRATE_ORIG

        #STOW_PROBE
        M402
    {% endif %}
#################################################################################################################


[gcode_macro START_PRINT]
## support PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}
variable_first_layer_min_xy: None
variable_first_layer_max_xy: None
gcode:
      {% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
      ;{% endif %}


  G90 ; Force coordinates to be absolute relative to the origin
                       
  G28 ; Home X/Y/Z axis

  #QUAD_GANTRY_LEVEL                    
  Z_TILT_ADJUST

  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE="{ params.PRINT_MIN | default(None, true) }"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE="{ params.PRINT_MAX | default(None, true) }"

  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
    ;BED_MESH_PROFILE LOAD="default"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE=None
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE=None

  M104 S{EXTRUDER_TEMP} ; set extruder temp
  M109 S{EXTRUDER_TEMP} ; wait for extruder temp

  G1 X3 Y10 Z4 F5000      ; Move safe Z height to shear strings

  G0 X5 Y10 Z0.1 F5000     ; Move in 1mm from edge and up [z] 0.2mm

  G92 E0                  ; Set extruder to [0] zero

  G1 X200 E40 F800        ; Extrude 30mm filiment along X axis 200mm long to prime and clean the nozzle

  G92 E0                  ; Reset extruder to [0] zero end of cleaning run

  G1 X205 F10000           ; quick wipe away from the filament line / purge
#####################################################################################################################


[gcode_macro END_PRINT]
variable_machine_depth:0
gcode:
    # Turn off extruder, and fan
   
    M104 S0
    M106 S0
    
  # Absolute positionning
    G90
  # Present print
    G1 X0 Y{machine_depth}
  # Disable steppers
    M84
    QUERY_PROBE
    POWER_OFF_BED
  # Print message on LCD
    M117 That's All Folks

#[gcode_macro Z_TILT_ADJUST]
#rename_existing:    #Z_TILT_ADJUST_ORIGINAL
#gcode:
  #QUERY_PROBE
  #M401                           ; deploy #Euclid Probe if needed
  #Z_TILT_ADJUST_ORIGINAL         ; check #bed level
  #M402                           ; dock #Euclid Probe
####################################################################
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:    QUAD_GANTRY_LEVEL_BASE
gcode:
  QUERY_PROBE
  M401                           ; deploy Euclid Probe if needed
  QUAD_GANTRY_LEVEL_BASE         ; check bed level
  M402                           ; dock Euclid Probe



[gcode_macro IF_QGL_FAILS]

gcode:
  G90
    # {% if not printer.probe.last_query %} #this might be reveersed in order
     G0 Z8 F10000               ;  set approach elevation of Z20
     
     preflight
     move_to_dock                ;  move probe into to dock 
     #move_to_dockside            ;  swipe probe off 
     second_move                ;  move away from dock area 
     G0 Z8 F10000               ;  move up to elevation of Z20 




